{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Fab Academy - Richard Shan My Fab GitLabs Repo Fab Academy Curriculum 2024","title":"Home"},{"location":"#fab-academy-richard-shan","text":"","title":"Fab Academy - Richard Shan"},{"location":"#my-fab-gitlabs-repo","text":"","title":"My Fab GitLabs Repo"},{"location":"#fab-academy-curriculum-2024","text":"","title":"Fab Academy Curriculum 2024"},{"location":"about/","text":"About Me This page is a WIP.","title":"About"},{"location":"about/#about-me","text":"This page is a WIP.","title":"About Me"},{"location":"lessons/prefab/arcade/","text":"Tiny Arcade Today, I fully built and assembled the Tiny Arcade Kit . The kit consisted of a bunch of small plastic parts which would be assembled together to create a small arcade machine. The acrylic was cut pretty roughly, however, so picking the pieces apart took some time. The largest problem, by far, was that the build had structural integrity issues through much of the assembly process due to only being held together by a single screw and would fall apart whenever it was turned. I solved this problem through having someone else assist me in holding the arcade as I pushed the pieces together. After all the pieces were in, the arcade was a lot more stable. Materials The kit that we assembled can be found on the manufacturer's website here . The kit included: 32-bit ARM processor OLED screen MicroSD card compatibility for game and video storage Joystick with two working pushbuttons Built-in speaker with volume control Rechargeable lithium battery USB port for charging and loading Acrylic casing Decorative stickers 5-pin Wireling connector for adding different dimensions to games Assembly I assembled the tiny arcade following the instructions within the manual provided in the kit. There were no major complications other than having some issues tearing off the wrapping for the acrylic due to having short nails and some difficulty in pushing the acrylic pieces together. I first added the joystick and input buttons onto the board. I then attached the speaker. I tore off the wrapping paper from all the acrylic walling. Here are all the acrylic pieces laid out before assembly: Next, I assembled the first side of the arcade, along with attaching the battery and the screw. I then put the second side of the arcade machine in, allowing me to fully screw both sides together. This is what the arcade looks like after assembling the rest of the acrylic pieces: Final step: stickers! Adding Games The base arcade came loaded with only 3 games on it. However, the arcade is able to support other games through a micro SD card. The instructions for doing so can be found on the TinyCircuits website here . My regular computer didn't have either an SD card or microSD port so I had to switch to a second computer. After that, I downloaded the other games from the TinyCircuits website . This is what the zip file containing all the games looks like. Within each of these game folders is a bin and a tsv file for that respective game. I then uploaded the contents of the zip file into the micro SD card, which was the D drive under my file system. After ejecting the micro SD card from the computer port, I put it into the port inside the TinyArcade machine. Instead of displaying a screen upon startup with a message notifying the user that there is no SD card inserted, the Arcade now starts up and allows the user to play all the imported games. The Arcade steps through the games in alphabetical order. All the added games are now playable!","title":"TinyArcade"},{"location":"lessons/prefab/arcade/#tiny-arcade","text":"Today, I fully built and assembled the Tiny Arcade Kit . The kit consisted of a bunch of small plastic parts which would be assembled together to create a small arcade machine. The acrylic was cut pretty roughly, however, so picking the pieces apart took some time. The largest problem, by far, was that the build had structural integrity issues through much of the assembly process due to only being held together by a single screw and would fall apart whenever it was turned. I solved this problem through having someone else assist me in holding the arcade as I pushed the pieces together. After all the pieces were in, the arcade was a lot more stable.","title":"Tiny Arcade"},{"location":"lessons/prefab/arcade/#materials","text":"The kit that we assembled can be found on the manufacturer's website here . The kit included: 32-bit ARM processor OLED screen MicroSD card compatibility for game and video storage Joystick with two working pushbuttons Built-in speaker with volume control Rechargeable lithium battery USB port for charging and loading Acrylic casing Decorative stickers 5-pin Wireling connector for adding different dimensions to games","title":"Materials"},{"location":"lessons/prefab/arcade/#assembly","text":"I assembled the tiny arcade following the instructions within the manual provided in the kit. There were no major complications other than having some issues tearing off the wrapping for the acrylic due to having short nails and some difficulty in pushing the acrylic pieces together. I first added the joystick and input buttons onto the board. I then attached the speaker. I tore off the wrapping paper from all the acrylic walling. Here are all the acrylic pieces laid out before assembly: Next, I assembled the first side of the arcade, along with attaching the battery and the screw. I then put the second side of the arcade machine in, allowing me to fully screw both sides together. This is what the arcade looks like after assembling the rest of the acrylic pieces: Final step: stickers!","title":"Assembly"},{"location":"lessons/prefab/arcade/#adding-games","text":"The base arcade came loaded with only 3 games on it. However, the arcade is able to support other games through a micro SD card. The instructions for doing so can be found on the TinyCircuits website here . My regular computer didn't have either an SD card or microSD port so I had to switch to a second computer. After that, I downloaded the other games from the TinyCircuits website . This is what the zip file containing all the games looks like. Within each of these game folders is a bin and a tsv file for that respective game. I then uploaded the contents of the zip file into the micro SD card, which was the D drive under my file system. After ejecting the micro SD card from the computer port, I put it into the port inside the TinyArcade machine. Instead of displaying a screen upon startup with a message notifying the user that there is no SD card inserted, the Arcade now starts up and allows the user to play all the imported games. The Arcade steps through the games in alphabetical order. All the added games are now playable!","title":"Adding Games"},{"location":"lessons/prefab/box/","text":"Cardboard Storage Box Today, I cut and assembled a cardboard box to use for storage for components in the future. Materials The materials I used for assembling the cardboard box were all sourced from the lab. 1 sheet of cardboard Epilog Fusion Pro laser cutter Exacto Knife Hot Glue Gun Assembly First, I downloaded the provided CDR file for the box design from Google Drive. I then ran the file through the laser cutter and took out the cardboard. This is the box after the cut. I folded in all the parts of the box to ensure that they assembled nicely, and scored some areas with an exacto knife. Here is the box after I folded it all together and hot glued it: Stickers I first imported a design into Silhouette Studio and traced it. I then cut out the design and placed the sticker onto my box. Here is the completed box with the bird design and a sticker of my name:","title":"Cardboard Storage Box"},{"location":"lessons/prefab/box/#cardboard-storage-box","text":"Today, I cut and assembled a cardboard box to use for storage for components in the future.","title":"Cardboard Storage Box"},{"location":"lessons/prefab/box/#materials","text":"The materials I used for assembling the cardboard box were all sourced from the lab. 1 sheet of cardboard Epilog Fusion Pro laser cutter Exacto Knife Hot Glue Gun","title":"Materials"},{"location":"lessons/prefab/box/#assembly","text":"First, I downloaded the provided CDR file for the box design from Google Drive. I then ran the file through the laser cutter and took out the cardboard. This is the box after the cut. I folded in all the parts of the box to ensure that they assembled nicely, and scored some areas with an exacto knife. Here is the box after I folded it all together and hot glued it:","title":"Assembly"},{"location":"lessons/prefab/box/#stickers","text":"I first imported a design into Silhouette Studio and traced it. I then cut out the design and placed the sticker onto my box. Here is the completed box with the bird design and a sticker of my name:","title":"Stickers"},{"location":"lessons/prefab/glasses/","text":"Flashing Glasses I built a pair of glasses with LEDs and sound sensors. The LEDs would flash in a pattern and change their states based on how much sound input was around the user (how much sound the microphone picked up). The kit can be found at the manufacturer's website . Materials The included materials in the kit are: 1 KA2284 LED Driver 5 1K Ohm Metal Film Resistors 3 10K Ohm Metal Film Resistors 1 2M Ohm Metal Film Resistors 1 Potentiometer 1 Ceramic Capacitor 2 Electrolytic Capacitors 1 S9014 Transistor 50 LEDs 1 MIC-6022 Microphone 1 SK12D07 Toggle Switch 4 Battery Holding Metal Sheets 8 Screws Plastic Glasses Casing 2 23A 12V Batteries 1 Screwdriver 1 PCB Assembly I followed the assembly instructions inside the manual that was included as part of the kit. There were no issues that arose during the process, despite the soldering of 50 LEDs being quite time consuming. I first soldered on the 1k, 10k, and 2M ohm resistors, respectively. I then soldered on the microphone and started on the LEDs. Here is what the glasses looked like after all the LEDs had been put in place: Next, I installed the 0.1uF 104 capacitor and LED driver. Then, I soldered on the transistor, 10uF electrolytic capacitors, and potentiometer. After adding the switch and battery holders, the board is complete. After putting the board into the plastic frame, this is what the completed glasses look like:","title":"LED Glasses"},{"location":"lessons/prefab/glasses/#flashing-glasses","text":"I built a pair of glasses with LEDs and sound sensors. The LEDs would flash in a pattern and change their states based on how much sound input was around the user (how much sound the microphone picked up). The kit can be found at the manufacturer's website .","title":"Flashing Glasses"},{"location":"lessons/prefab/glasses/#materials","text":"The included materials in the kit are: 1 KA2284 LED Driver 5 1K Ohm Metal Film Resistors 3 10K Ohm Metal Film Resistors 1 2M Ohm Metal Film Resistors 1 Potentiometer 1 Ceramic Capacitor 2 Electrolytic Capacitors 1 S9014 Transistor 50 LEDs 1 MIC-6022 Microphone 1 SK12D07 Toggle Switch 4 Battery Holding Metal Sheets 8 Screws Plastic Glasses Casing 2 23A 12V Batteries 1 Screwdriver 1 PCB","title":"Materials"},{"location":"lessons/prefab/glasses/#assembly","text":"I followed the assembly instructions inside the manual that was included as part of the kit. There were no issues that arose during the process, despite the soldering of 50 LEDs being quite time consuming. I first soldered on the 1k, 10k, and 2M ohm resistors, respectively. I then soldered on the microphone and started on the LEDs. Here is what the glasses looked like after all the LEDs had been put in place: Next, I installed the 0.1uF 104 capacitor and LED driver. Then, I soldered on the transistor, 10uF electrolytic capacitors, and potentiometer. After adding the switch and battery holders, the board is complete. After putting the board into the plastic frame, this is what the completed glasses look like:","title":"Assembly"},{"location":"lessons/prefab/pen/","text":"Pen Turning For my first woodworking project during Fab, I turned a pen from a kit containing 2 copper tubes, an ink cartridge, and a pen tip and cap. We were each given a bit of wood which we cut into the body of the pen. We then assembled the parts together. This was also my first time turning a pen so there were a few mishaps but overall, my final product turned out well! Materials The materials used were all from the kit, with the exception of the wood and tools which came from the lab. 2 Copper Tubes 1 Ink Cartridge Pen Cap Pen Tip Pen Clip Lathe Machine Crusher Rotary Machine Laser Cutter Pen Turning With the help of my instructor, I first cut the wood into rectangular prisms. Next, I then used the lathe to drill a cylindrical hole inside the wood. I then sanded the copper tubes which would hold the pen cartridge in order to rough them up a bit to give it more surface area when gluing. I then glued the tubes into the previously drilled hole inside the wood. I then put the wood blocks on the lathe, pushing the rod through the copper tubes glued inside the wood. Then I used different tipped tools to chip away parts of the wood, first chipping away large chunks and eventually using a finer tipped tool to make small modifications. After cutting the wood down to a thin cylindrical shape, I used sandpaper to smooth out the surface, starting with very rough sandpaper to remove some material and flatten the surface then using finer and finer grade sandpaper to create a very smooth surface. After sanding the wood into a smooth surface, I applied a light spray of glue and accelerant as a final coating. I then used the crusher to push the pen tip, clip, and cap together with the wood body and copper cores. Here is what the pen looks like after finishing assembly: Pen Rotary Engraving We used the rotary machine to engrave a cylindrical object inside the laser cutter. This was my first time using the rotary machine (along with my classmates and my instructor), so we spent a lot of time reading the manufacturer's instructions and figuring out the software. I first cut a cylinder of wood to use as a test for the rotary machine and to figure out how it works. I then put the wood cylinder into the rotary machine inside of the laser cutter and did a trial print. After successfully completing the test run, I then put my pen into the rotary machine and ran an engraving on it. However, I didn't realize that when importing the file to print, part of the text that was supposed to be engraved was actually off the page. Because I didn't realize this until after taking the pen out of the laser cutter and seeing the botched print, I had a pen that was emblazoned with \"ichard Shan\". But as I didn't want to be stuck with a misspelled pen I decided to use an exacto-knife to manually engrave the \"R\" at the start.","title":"Pen Turning"},{"location":"lessons/prefab/pen/#pen-turning","text":"For my first woodworking project during Fab, I turned a pen from a kit containing 2 copper tubes, an ink cartridge, and a pen tip and cap. We were each given a bit of wood which we cut into the body of the pen. We then assembled the parts together. This was also my first time turning a pen so there were a few mishaps but overall, my final product turned out well!","title":"Pen Turning"},{"location":"lessons/prefab/pen/#materials","text":"The materials used were all from the kit, with the exception of the wood and tools which came from the lab. 2 Copper Tubes 1 Ink Cartridge Pen Cap Pen Tip Pen Clip Lathe Machine Crusher Rotary Machine Laser Cutter","title":"Materials"},{"location":"lessons/prefab/pen/#pen-turning_1","text":"With the help of my instructor, I first cut the wood into rectangular prisms. Next, I then used the lathe to drill a cylindrical hole inside the wood. I then sanded the copper tubes which would hold the pen cartridge in order to rough them up a bit to give it more surface area when gluing. I then glued the tubes into the previously drilled hole inside the wood. I then put the wood blocks on the lathe, pushing the rod through the copper tubes glued inside the wood. Then I used different tipped tools to chip away parts of the wood, first chipping away large chunks and eventually using a finer tipped tool to make small modifications. After cutting the wood down to a thin cylindrical shape, I used sandpaper to smooth out the surface, starting with very rough sandpaper to remove some material and flatten the surface then using finer and finer grade sandpaper to create a very smooth surface. After sanding the wood into a smooth surface, I applied a light spray of glue and accelerant as a final coating. I then used the crusher to push the pen tip, clip, and cap together with the wood body and copper cores. Here is what the pen looks like after finishing assembly:","title":"Pen Turning"},{"location":"lessons/prefab/pen/#pen-rotary-engraving","text":"We used the rotary machine to engrave a cylindrical object inside the laser cutter. This was my first time using the rotary machine (along with my classmates and my instructor), so we spent a lot of time reading the manufacturer's instructions and figuring out the software. I first cut a cylinder of wood to use as a test for the rotary machine and to figure out how it works. I then put the wood cylinder into the rotary machine inside of the laser cutter and did a trial print. After successfully completing the test run, I then put my pen into the rotary machine and ran an engraving on it. However, I didn't realize that when importing the file to print, part of the text that was supposed to be engraved was actually off the page. Because I didn't realize this until after taking the pen out of the laser cutter and seeing the botched print, I had a pen that was emblazoned with \"ichard Shan\". But as I didn't want to be stuck with a misspelled pen I decided to use an exacto-knife to manually engrave the \"R\" at the start.","title":"Pen Rotary Engraving"},{"location":"lessons/prefab/rp2040/","text":"RP2040 Materials 1 RP2040 Microcontroller Chip 14 Pin Headers Soldering Here are the pin headers that will be soldered on to the RP2040: I then snapped the pin header row in half so I could solder one half to each side of the RP2040. Next, I pushed the legs into the RP2040 to ensure that it all fit together. After soldering the pin headers on, I plugged the RP2040 into my computer and uploaded the code that would blind the LED.","title":"RP2040"},{"location":"lessons/prefab/rp2040/#rp2040","text":"","title":"RP2040"},{"location":"lessons/prefab/rp2040/#materials","text":"1 RP2040 Microcontroller Chip 14 Pin Headers","title":"Materials"},{"location":"lessons/prefab/rp2040/#soldering","text":"Here are the pin headers that will be soldered on to the RP2040: I then snapped the pin header row in half so I could solder one half to each side of the RP2040. Next, I pushed the legs into the RP2040 to ensure that it all fit together. After soldering the pin headers on, I plugged the RP2040 into my computer and uploaded the code that would blind the LED.","title":"Soldering"},{"location":"lessons/prefab/spinner/","text":"Three Leaf Gyroscope Spinner Materials Helping Hand: 1 Screwdriver 4 Legs 4 Screws 4 Alligator Clips + Spares 4 Stand Pads 1 Stand Base Gyroscope Spinner: 11 100 Ohm Chip Resistors 1 10k Ohm Chip Resistor 1 Chip Capacitor 11 LEDs 1 Switch 1 MCU Chip 3 Battery Clips 1 Custom PCB Board 1 Ball Bearing 3 Screws 2 Shells and Caps Helping Hand Assembly Because this was my first time soldering after starting the Fab program, I had to build a helping hand for me to keep and use at home before I started building the three leaf gyroscope spinner. This helping hand was a lot better than the ones I had used before as it had 4 different clips that could hold an item in almost any orientation. Here are all the materials: I first took all the materials out of the packaging. I then attached the alligator clips onto the legs. I put in the first two shorter legs into the base and screwed them in. After attaching the final two longer legs onto the base of the stand, the helping hand was complete. Spinner Assembly After assembling the soldering stand, I started soldering together the spinner. I built a three leaf gyroscope spinner (fidget spinner) with LEDs. The spinner uses a ball bearing to spin around the center and is able to change the patterns on the LEDs. This build was intended to allow me to practice my surface-mound soldering skills. Here is the frame before any assembly: First, I soldered one of the sides on each 100 ohm resistor to align them all. After everything was aligned, I soldered on the other side of the resistors. I then soldered on the LEDs and the MCU chip. Next, I soldered on the button. I then soldered on the capacitor. Next, I soldered on the battery holders and put the batteries in it. The actual board of the spinner is now complete. Here is the spinner when I was testing the LEDs to make sure they worked before putting the framing on: After I verified that the components were working, I the ball bearing in and encased it all in the plastic frame. Here is the completed spinner as with LEDs on as it spins. The LEDs are able to light up in different sequences to form different patterns when spinning, but the camera on my phone was unable to capture the patterns becuase it wasn't very receptive to fast moving objects.","title":"3 Leaf Gyroscope Spinner"},{"location":"lessons/prefab/spinner/#three-leaf-gyroscope-spinner","text":"","title":"Three Leaf Gyroscope Spinner"},{"location":"lessons/prefab/spinner/#materials","text":"Helping Hand: 1 Screwdriver 4 Legs 4 Screws 4 Alligator Clips + Spares 4 Stand Pads 1 Stand Base Gyroscope Spinner: 11 100 Ohm Chip Resistors 1 10k Ohm Chip Resistor 1 Chip Capacitor 11 LEDs 1 Switch 1 MCU Chip 3 Battery Clips 1 Custom PCB Board 1 Ball Bearing 3 Screws 2 Shells and Caps","title":"Materials"},{"location":"lessons/prefab/spinner/#helping-hand-assembly","text":"Because this was my first time soldering after starting the Fab program, I had to build a helping hand for me to keep and use at home before I started building the three leaf gyroscope spinner. This helping hand was a lot better than the ones I had used before as it had 4 different clips that could hold an item in almost any orientation. Here are all the materials: I first took all the materials out of the packaging. I then attached the alligator clips onto the legs. I put in the first two shorter legs into the base and screwed them in. After attaching the final two longer legs onto the base of the stand, the helping hand was complete.","title":"Helping Hand Assembly"},{"location":"lessons/prefab/spinner/#spinner-assembly","text":"After assembling the soldering stand, I started soldering together the spinner. I built a three leaf gyroscope spinner (fidget spinner) with LEDs. The spinner uses a ball bearing to spin around the center and is able to change the patterns on the LEDs. This build was intended to allow me to practice my surface-mound soldering skills. Here is the frame before any assembly: First, I soldered one of the sides on each 100 ohm resistor to align them all. After everything was aligned, I soldered on the other side of the resistors. I then soldered on the LEDs and the MCU chip. Next, I soldered on the button. I then soldered on the capacitor. Next, I soldered on the battery holders and put the batteries in it. The actual board of the spinner is now complete. Here is the spinner when I was testing the LEDs to make sure they worked before putting the framing on: After I verified that the components were working, I the ball bearing in and encased it all in the plastic frame. Here is the completed spinner as with LEDs on as it spins. The LEDs are able to light up in different sequences to form different patterns when spinning, but the camera on my phone was unable to capture the patterns becuase it wasn't very receptive to fast moving objects.","title":"Spinner Assembly"},{"location":"lessons/week1/gitlab/","text":"GitLab and MkDocs Git and Python Due to prior coding experience, I already had both Git and Python installed on my computer. I had installed MkDocs a few months prior for documenting some of my coding projects. However, when I was helping some of my friends, I noticed a few common errors: The term 'python' is not recognized as the name of a cmdlet, function, script file, or operable program. Add the Python installation directory (where Python is located on your local system) to your System Environment Variables. To access the System Environment Variables menu, open the Run menu (Windows + R) and type in \"sysdm.cpl\", or go to the \"View Advanced System Settings\" menu. Then, click Advanced on the top navigation bar and click Environment Variables. Add the Python installation location to the PATH variable (user or system) by clicking Path -> Edit -> New. The term 'pip' is not recognized as the name of a cmdlet, function, script file, or operable program. Run the \" python -m ensurepip \" command. This will download pip automatically if you do not already have it. Use the pip3 command instead of pip (e.g. \" pip3 install mkdocs \" instead of \" pip install mkdocs \"). The term 'mkdocs' is not recognized as the name of a cmdlet, function, script file, or operable program. Add the python Scripts folder to your System Environment Variables. After running \" pip install mkdocs \", the mkdocs.exe file should have been added to your Scripts folder. The scripts folder can be found in the same place Python is located. For example, I installed Python under \"C:\\myPython\", so my MkDocs was at \"C:\\myPython\\Scripts\\mkdocs.exe\" and I would add \"C:\\myPython\\Scripts\" to my PATH system environment variable. The steps to edit System Environment Variables are above. fatal: not a git repository (or any of the parent directories): .git You could be in the wrong directory, in which case run \" cd your-git-repo-path \" and re-run the command. For example, I would run \" cd C:\\fab\\richard-shan \". If the repository doesn't exist or you haven't created it yet, run \" git clone git-repo-url \". SSH Key Setup To generate my SSH key, I followed the following steps. I used Windows Powershell as my terminal of choice, though others such as CMD and Git Bash would have achieved the same function. Open a terminal instance Run git config -\u2013global user.email \u201c26shanr@charlottelatin.org\u201d . Run ssh-keygen -t rsa -C \u201c26shanr@charlottelatin.org\u201d . Specify a file to save the key into (click Return/Enter for none) Specify a password (click Return/Enter for none) Copy the generated key for storage. The key starts with SHA256 and ends with the closing quotation mark after your email address. I then added the SSH key to my GitLabs account to allow pushing. To view the key if you ever lose it, you can run \" cat ~/.ssh/id_rsa.pub \". Environment Setup I navigated to the file directory that I was going to use, then cloned my repository from GitLabs. PS C:\\fab> git clone git@gitlab.fabcloud.org:academany/fabacademy/2024/labs/charlotte/students/richard-shan.git Cloning into 'richard-shan'... remote: Enumerating objects: 176, done. remote: Counting objects: 100% (100/100), done. remote: Compressing objects: 100% (83/83), done. Receiving objects: 63% (111/176), 1.39 MiB | 2.76 MiB/seused 76 Receiving objects: 100% (176/176), 3.09 MiB | 3.39 MiB/s, done. Resolving deltas: 100% (49/49), done. PS C:\\fab> Cloning from Github created a new folder which I subsequently navigated into. Having installed MkDocs via pip, I ran \" mkdocs new richard-shan \" in the top-level fab folder to initialize a new MkDocs project in my git directory. I then navigated to the project folder and ran \" mkdocs serve \" to locally host my website for testing and viewing. PS C:\\fab> mkdocs new richard-shan INFO - Creating project directory: richard-shan INFO - Writing config file: richard-shan\\mkdocs.yml INFO - Writing initial docs: richard-shan\\docs\\index.md PS C:\\fab> cd .\\richard-shan\\ PS C:\\fab\\richard-shan> mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.25 seconds INFO - [19:57:25] Watching paths for changes: 'docs', 'mkdocs.yml' INFO - [19:57:25] Serving on http://127.0.0.1:8000/ The groundwork for my website was now complete, and I could view the website on my localhost. After pushing to Git and changing the default markdown files, the site was ready! Git and MkDocs Integration The biggest difficulty I encountered was configuring the gitlab-ci.yml file to properly integrate with MkDocs. At first, I was using an outdated file which I copied into my gitlab-ci.yml file, which looked like this: @Override image: python:3.8-buster before_script: - pip install -r requirements.txt test: stage: test script: - mkdocs build --strict --verbose --site-dir test artifacts: paths: - test rules: - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH pages: stage: deploy script: - mkdocs build --strict --verbose artifacts: paths: - public rules: - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH Unfortunately, I initially download my gitlab-ci.yml file from the MkDocs Gitlab repo , which meant that I was using an outdated file. Additionally, I did not download the requirements.txt file and thus I would recieve the following error when I pushed to Git: ERROR: Could not open requirements file: [Errno 2] No such file or directory: 'requirements.txt' [notice] A new release of pip is available: 23.0.1 -> 23.3.2 [notice] To update, run: pip install --upgrade pip real 0m2.853s user 0m2.665s sys 0m0.168s Cleaning up project directory and file based variables 00:01 ERROR: Job failed: exit code 1 I was unable to solve the error for about a half hour because I didn't know how to find the error message and I was stuck modifying code snippets which I thought were problematic. However, when I checked my email, I recieved a notification that my job failed and clicked the link which brought me to the Jobs page on GitLab. The Jobs page itself was a difficult location to navigate to, and only there could I see the actual console error message output. However, after I was able to see the error, debugging was easy. I realized that I should be cloning from the Fab Academy Student Template GitLab repo as opposed to the MkDocs GitLab repo . From there, I downloaded the requirements.txt file along with a better suited .gitlab-ci.yml file. However, I downloaded the files manually instead of cloning the repo because I only needed 2 files. Additionally, I had prior experience working with MkDocs and wanted to setup my own framework instead of using the provided one. My updated .gitlab-ci.yml file looks like this: image: python:3.9-slim before_script: - time apt update && apt-get install -y git - time pip install -r requirements.txt test: stage: test script: - time mkdocs build --site-dir test artifacts: paths: - test rules: - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH when: never pages: stage: deploy variables: ENABLED_GIT_REVISION_DATE: \"true\" GIT_DEPTH: 1000 script: - time mkdocs build --site-dir public artifacts: paths: - public rules: - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH After updating my gitlab-ci file, the mkdocs.yml file was recognized and took precedence. My site changed to use the markdown files as opposed to the html files. The commits and pushes all succeeded and I was able to start working on the site with MkDocs. MkDocs File Organization I decided not to use the Fab Student Template for setting up the week folders as I wanted to build my own directory system for documentation. The following image shows the file hierarchy that I built, starting from the root directory of the site at the top. Each page of this website is stored in a markdown (.md) file, which are stored under their respective week folders under the general lessons folder. Every image/video on this website is stored under its respective week folder under the pics folder. MkDocs's default starting directory is the docs folder, and as such, all of my documentation is stored in its subfolders. Git Push File Size Limit I had documented my PreFab work via MkDocs, and I now wanted to add it to my Fab site. However, I wasn't aware of the file size limit when documenting for PreFab and thus had many large files. I went through and used online video/image compressors to compress the files into a smaller size. Even after compressing and when only trying to push a few megabytes of data, I would sometimes still run into the following error: PS C:\\fab\\richard-shan> git push Enumerating objects: 66, done. Counting objects: 100% (66/66), done. Delta compression using up to 8 threads Compressing objects: 100% (57/57), done. remote: fatal: pack exceeds maximum allowed size fatal: sha1 file ' ' write error: Broken pipe error: remote unpack failed: unpack-objects abnormal exit To gitlab.fabcloud.org:academany/fabacademy/2024/labs/charlotte/students/richard-shan.git ! [remote rejected] main -> main (unpacker error) error: failed to push some refs to 'gitlab.fabcloud.org:academany/fabacademy/2024/labs/charlotte/students/richard-shan.git' After doing some research online, I realized that this error was because my previous commit was still being cached in my .git folder, and was contributing to the 10MB file size limit. To stop caching this, I ran the git reset command. PS C:\\fab\\richard-shan> git reset --soft HEAD~1 After running the reset command, I was then able to push without any errors. PS C:\\fab\\richard-shan> git add --all PS C:\\fab\\richard-shan> git commit -m \"Prefab documentation\" [main 847ff3e] Prefab documentation 20 files changed, 123 insertions(+), 1 deletion(-) [...] PS C:\\fab\\richard-shan> git push Enumerating objects: 37, done. Counting objects: 100% (37/37), done. Delta compression using up to 8 threads Compressing objects: 100% (29/29), done. Writing objects: 100% (29/29), 9.65 MiB | 1.68 MiB/s, done. [...] PS C:\\fab\\richard-shan> References Huge thank you to Stuart Christhilf for teaching me MkDocs during our Data Structures class last semester! Adrian Torres' and Adam Stone's documentations were also valuable resources for setting up GitLab.","title":"GitLab & MKDocs"},{"location":"lessons/week1/gitlab/#gitlab-and-mkdocs","text":"","title":"GitLab and MkDocs"},{"location":"lessons/week1/gitlab/#git-and-python","text":"Due to prior coding experience, I already had both Git and Python installed on my computer. I had installed MkDocs a few months prior for documenting some of my coding projects. However, when I was helping some of my friends, I noticed a few common errors: The term 'python' is not recognized as the name of a cmdlet, function, script file, or operable program. Add the Python installation directory (where Python is located on your local system) to your System Environment Variables. To access the System Environment Variables menu, open the Run menu (Windows + R) and type in \"sysdm.cpl\", or go to the \"View Advanced System Settings\" menu. Then, click Advanced on the top navigation bar and click Environment Variables. Add the Python installation location to the PATH variable (user or system) by clicking Path -> Edit -> New. The term 'pip' is not recognized as the name of a cmdlet, function, script file, or operable program. Run the \" python -m ensurepip \" command. This will download pip automatically if you do not already have it. Use the pip3 command instead of pip (e.g. \" pip3 install mkdocs \" instead of \" pip install mkdocs \"). The term 'mkdocs' is not recognized as the name of a cmdlet, function, script file, or operable program. Add the python Scripts folder to your System Environment Variables. After running \" pip install mkdocs \", the mkdocs.exe file should have been added to your Scripts folder. The scripts folder can be found in the same place Python is located. For example, I installed Python under \"C:\\myPython\", so my MkDocs was at \"C:\\myPython\\Scripts\\mkdocs.exe\" and I would add \"C:\\myPython\\Scripts\" to my PATH system environment variable. The steps to edit System Environment Variables are above. fatal: not a git repository (or any of the parent directories): .git You could be in the wrong directory, in which case run \" cd your-git-repo-path \" and re-run the command. For example, I would run \" cd C:\\fab\\richard-shan \". If the repository doesn't exist or you haven't created it yet, run \" git clone git-repo-url \".","title":"Git and Python"},{"location":"lessons/week1/gitlab/#ssh-key-setup","text":"To generate my SSH key, I followed the following steps. I used Windows Powershell as my terminal of choice, though others such as CMD and Git Bash would have achieved the same function. Open a terminal instance Run git config -\u2013global user.email \u201c26shanr@charlottelatin.org\u201d . Run ssh-keygen -t rsa -C \u201c26shanr@charlottelatin.org\u201d . Specify a file to save the key into (click Return/Enter for none) Specify a password (click Return/Enter for none) Copy the generated key for storage. The key starts with SHA256 and ends with the closing quotation mark after your email address. I then added the SSH key to my GitLabs account to allow pushing. To view the key if you ever lose it, you can run \" cat ~/.ssh/id_rsa.pub \".","title":"SSH Key Setup"},{"location":"lessons/week1/gitlab/#environment-setup","text":"I navigated to the file directory that I was going to use, then cloned my repository from GitLabs. PS C:\\fab> git clone git@gitlab.fabcloud.org:academany/fabacademy/2024/labs/charlotte/students/richard-shan.git Cloning into 'richard-shan'... remote: Enumerating objects: 176, done. remote: Counting objects: 100% (100/100), done. remote: Compressing objects: 100% (83/83), done. Receiving objects: 63% (111/176), 1.39 MiB | 2.76 MiB/seused 76 Receiving objects: 100% (176/176), 3.09 MiB | 3.39 MiB/s, done. Resolving deltas: 100% (49/49), done. PS C:\\fab> Cloning from Github created a new folder which I subsequently navigated into. Having installed MkDocs via pip, I ran \" mkdocs new richard-shan \" in the top-level fab folder to initialize a new MkDocs project in my git directory. I then navigated to the project folder and ran \" mkdocs serve \" to locally host my website for testing and viewing. PS C:\\fab> mkdocs new richard-shan INFO - Creating project directory: richard-shan INFO - Writing config file: richard-shan\\mkdocs.yml INFO - Writing initial docs: richard-shan\\docs\\index.md PS C:\\fab> cd .\\richard-shan\\ PS C:\\fab\\richard-shan> mkdocs serve INFO - Building documentation... INFO - Cleaning site directory INFO - Documentation built in 0.25 seconds INFO - [19:57:25] Watching paths for changes: 'docs', 'mkdocs.yml' INFO - [19:57:25] Serving on http://127.0.0.1:8000/ The groundwork for my website was now complete, and I could view the website on my localhost. After pushing to Git and changing the default markdown files, the site was ready!","title":"Environment Setup"},{"location":"lessons/week1/gitlab/#git-and-mkdocs-integration","text":"The biggest difficulty I encountered was configuring the gitlab-ci.yml file to properly integrate with MkDocs. At first, I was using an outdated file which I copied into my gitlab-ci.yml file, which looked like this: @Override image: python:3.8-buster before_script: - pip install -r requirements.txt test: stage: test script: - mkdocs build --strict --verbose --site-dir test artifacts: paths: - test rules: - if: $CI_COMMIT_REF_NAME != $CI_DEFAULT_BRANCH pages: stage: deploy script: - mkdocs build --strict --verbose artifacts: paths: - public rules: - if: $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH Unfortunately, I initially download my gitlab-ci.yml file from the MkDocs Gitlab repo , which meant that I was using an outdated file. Additionally, I did not download the requirements.txt file and thus I would recieve the following error when I pushed to Git: ERROR: Could not open requirements file: [Errno 2] No such file or directory: 'requirements.txt' [notice] A new release of pip is available: 23.0.1 -> 23.3.2 [notice] To update, run: pip install --upgrade pip real 0m2.853s user 0m2.665s sys 0m0.168s Cleaning up project directory and file based variables 00:01 ERROR: Job failed: exit code 1 I was unable to solve the error for about a half hour because I didn't know how to find the error message and I was stuck modifying code snippets which I thought were problematic. However, when I checked my email, I recieved a notification that my job failed and clicked the link which brought me to the Jobs page on GitLab. The Jobs page itself was a difficult location to navigate to, and only there could I see the actual console error message output. However, after I was able to see the error, debugging was easy. I realized that I should be cloning from the Fab Academy Student Template GitLab repo as opposed to the MkDocs GitLab repo . From there, I downloaded the requirements.txt file along with a better suited .gitlab-ci.yml file. However, I downloaded the files manually instead of cloning the repo because I only needed 2 files. Additionally, I had prior experience working with MkDocs and wanted to setup my own framework instead of using the provided one. My updated .gitlab-ci.yml file looks like this: image: python:3.9-slim before_script: - time apt update && apt-get install -y git - time pip install -r requirements.txt test: stage: test script: - time mkdocs build --site-dir test artifacts: paths: - test rules: - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH when: never pages: stage: deploy variables: ENABLED_GIT_REVISION_DATE: \"true\" GIT_DEPTH: 1000 script: - time mkdocs build --site-dir public artifacts: paths: - public rules: - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH After updating my gitlab-ci file, the mkdocs.yml file was recognized and took precedence. My site changed to use the markdown files as opposed to the html files. The commits and pushes all succeeded and I was able to start working on the site with MkDocs.","title":"Git and MkDocs Integration"},{"location":"lessons/week1/gitlab/#mkdocs-file-organization","text":"I decided not to use the Fab Student Template for setting up the week folders as I wanted to build my own directory system for documentation. The following image shows the file hierarchy that I built, starting from the root directory of the site at the top. Each page of this website is stored in a markdown (.md) file, which are stored under their respective week folders under the general lessons folder. Every image/video on this website is stored under its respective week folder under the pics folder. MkDocs's default starting directory is the docs folder, and as such, all of my documentation is stored in its subfolders.","title":"MkDocs File Organization"},{"location":"lessons/week1/gitlab/#git-push-file-size-limit","text":"I had documented my PreFab work via MkDocs, and I now wanted to add it to my Fab site. However, I wasn't aware of the file size limit when documenting for PreFab and thus had many large files. I went through and used online video/image compressors to compress the files into a smaller size. Even after compressing and when only trying to push a few megabytes of data, I would sometimes still run into the following error: PS C:\\fab\\richard-shan> git push Enumerating objects: 66, done. Counting objects: 100% (66/66), done. Delta compression using up to 8 threads Compressing objects: 100% (57/57), done. remote: fatal: pack exceeds maximum allowed size fatal: sha1 file ' ' write error: Broken pipe error: remote unpack failed: unpack-objects abnormal exit To gitlab.fabcloud.org:academany/fabacademy/2024/labs/charlotte/students/richard-shan.git ! [remote rejected] main -> main (unpacker error) error: failed to push some refs to 'gitlab.fabcloud.org:academany/fabacademy/2024/labs/charlotte/students/richard-shan.git' After doing some research online, I realized that this error was because my previous commit was still being cached in my .git folder, and was contributing to the 10MB file size limit. To stop caching this, I ran the git reset command. PS C:\\fab\\richard-shan> git reset --soft HEAD~1 After running the reset command, I was then able to push without any errors. PS C:\\fab\\richard-shan> git add --all PS C:\\fab\\richard-shan> git commit -m \"Prefab documentation\" [main 847ff3e] Prefab documentation 20 files changed, 123 insertions(+), 1 deletion(-) [...] PS C:\\fab\\richard-shan> git push Enumerating objects: 37, done. Counting objects: 100% (37/37), done. Delta compression using up to 8 threads Compressing objects: 100% (29/29), done. Writing objects: 100% (29/29), 9.65 MiB | 1.68 MiB/s, done. [...] PS C:\\fab\\richard-shan>","title":"Git Push File Size Limit"},{"location":"lessons/week1/gitlab/#references","text":"Huge thank you to Stuart Christhilf for teaching me MkDocs during our Data Structures class last semester! Adrian Torres' and Adam Stone's documentations were also valuable resources for setting up GitLab.","title":"References"}]}